!function(){"use strict";var t={17:function(t,e,n){t.exports=n.p+"5bb6a7c331425e1064ce.png"},136:function(t,e,n){t.exports=n.p+"e95f659b81629e68533f.png"}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o](i,i.exports,n),i.exports}n.p="",function(){function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t(e)}function e(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function o(t){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?e(Object(o),!0).forEach((function(e){r(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):e(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function r(e,n,o){return(n=function(e){var n=function(e,n){if("object"!==t(e)||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var r=o.call(e,"string");if("object"!==t(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===t(n)?n:String(n)}(n))in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(t){return function(t){if(Array.isArray(t))return a(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return a(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?a(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}var u=function(t,e){return[].concat(i(t.map((function(t){return o({},t)}))),i(e.map((function(t){return o({},t)}))))},c=function(t){return document[arguments.length>1&&void 0!==arguments[1]?arguments[1]:"querySelector"](t)},l=function(t){return"function"==typeof t&&t()},s=function(t,e,n){return l(n),e.style.display=t},p=function(t,e){return e.classList.contains(t)},f=function(t,e,n,o){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4];t.animate([{opacity:e},{opacity:n}],{duration:o,easing:"ease-in-out"}).onfinish=function(){r&&t.remove()}},m=function(t,e){for(var n in e)t.setAttribute(n,e[n])},d=function(t){return t.startsWith(".")},y=function(t){return function(){return d(t)?t.slice(1):t}},b=function(t,e){return e.closest((n=t,function(){return d(n)?n:"."+n})());var n},v=function(t,e){return p(t,e)&&b(y(t)(),e)},_=function(t,e,n){return n.addEventListener(t,e)},h=function(t,e){var n=t[e.target.id];n&&n(e)},g=function(t,e,n){return{formSelector:t,inputSelector:e,submitButtonSelector:n,inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"}};function w(t){return w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},w(t)}function S(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,j(o.key),o)}}function P(t,e,n){return(e=j(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function j(t){var e=function(t,e){if("object"!==w(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==w(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===w(e)?e:String(e)}var E=function(){function t(e){var n=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),P(this,"_createCallbackAddDisplay",(function(){return function(){return function(t,e){return e.classList.add(t)}(n._openedClassName,n._popupElement)}})),P(this,"_createCallbackRemoveDisplay",(function(){return function(){!function(t,e){e.classList.remove(t)}(n._openedClassName,n._popupElement)}})),P(this,"_handleEscClose",(function(){var t;_("keydown",(t=n._createCallbackRemoveDisplay(),function(e){return"Escape"===e.key?l(t):null}),document)})),P(this,"_handleOutsideClickClose",(function(){var t,e;_("mousedown",(t=n._popupElementWithoutDot,e=n._createCallbackRemoveDisplay(),function(n){return v(t,n.target)?l(e):null}),n._popupElement)})),P(this,"open",(function(){return function(){!function(t,e,n){var o=p(t,e);s(o?"null":"block",e,n)}(n._openedClassName,n._popupElement,n._createCallbackAddDisplay())}})),P(this,"close",(function(){return function(){!function(t,e,n){var o=p(t,e);s(o?"hidden":"null",e,n)}(n._openedClassName,n._popupElement,n._createCallbackRemoveDisplay())}})),P(this,"setEventListeners",(function(){n._handleEscClose(),n._handleOutsideClickClose(),n._getCloseButtonsAndAddEventListener()})),this._popupElement=c(e),this._popupElementWithoutDot=y(e)(),this._openedClassName="".concat(this._popupElementWithoutDot,"__opened"),this._closeButtons=Array.from(c('[id$="__closed-btn"]',"querySelectorAll"))}var e,n;return e=t,(n=[{key:"_getCloseButtonsAndAddEventListener",value:function(){var t=this;this._closeButtons.forEach((function(e){_("mousedown",(function(){t.close()()}),e)}))}}])&&S(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function O(t){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},O(t)}function C(t,e){return C=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},C(t,e)}function I(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function L(t){return L=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},L(t)}function k(t){var e=function(t,e){if("object"!==O(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==O(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===O(e)?e:String(e)}var A=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&C(t,e)}(i,t);var e,n,o,r=(n=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=L(n);if(o){var r=L(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===O(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return I(t)}(this,t)});function i(){var t,e,n,o;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),e=I(t=r.call(this,".img-popup-card")),o=function(){t._setEventListeners},(n=k(n="setEventListenerspopupWithImageToDOM"))in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,t._setEventListeners=t.setEventListeners(),t._setEventListenerCard=R.prototype.setEventListenerFromPopupWithImage,t.open=t.open(),t}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(E);function T(t){return T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},T(t)}function F(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,r=function(t,e){if("object"!==T(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==T(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===T(r)?r:String(r)),o)}var r}var R=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._data=e,this._templateSelector=n,this._cardElement=this._getTemplate(),this._cardImage=this._cardElement.querySelector(".card__image"),this._cardTitle=this._cardElement.querySelector(".card__title"),this.setEventListenerFromPopupWithImage()}var e,n;return e=t,(n=[{key:"_getTemplate",value:function(){return c(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"setEventListenerFromPopupWithImage",value:function(){var t=this;this._cardImage.addEventListener("mousedown",(function(){(new A).open(),rt.src=t._data.link,it.textContent=t._data.name}))}},{key:"generateInstanceCard",value:function(){return m(this._cardImage,{src:this._data.link,alt:"Imagem de ".concat(this._data.name)}),this._cardTitle.textContent=this._data.name,this._cardElement}}])&&F(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),B=function(t){if(v("button-heart-icon",t.target)){var e=b("button-heart-icon",t.target),n="true"===e.getAttribute("data-active");e.setAttribute("data-active",!n),m(e,n?{src:nt,alt:"Icon de coração desativado apenas com bordas"}:{src:et,alt:"Icon de coração ativado com preenchimento"}),f(e,0,1,400)}},D=function(t){if(v("button-trash-icon",t.target)){var e=b("card",t.target);f(e,1,0,400,!0)}};function W(t){return function(t){if(Array.isArray(t))return x(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||function(t,e){if(t){if("string"==typeof t)return x(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?x(t,e):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}var V={openPopupProfile:"popup__opened",popupProfile:c("#popup"),popupProfileForm:c(".popup__form"),nameInputProfile:c(".popup__input_type_name"),jobInputProfile:c(".popup__input_type_job"),nameOutputProfile:c(".header__title"),jobOutputProfile:c(".header__subtitle"),btnSubmitProfile:c(".popup__button"),btnCloseProfile:c(".popup__closed-btn"),btnEditProfile:c(".button-edit")},U=V.popupProfileForm,M=V.nameInputProfile,q=V.jobInputProfile,N=V.nameOutputProfile,z=V.jobOutputProfile,$=[{name:N.textContent,job:z.textContent}],G=[],Y=u(G,$),H={openPopupCardAdd:"popup_card-add__opened",popupCardAdd:c("#popup_card-add"),popupCardAddForm:c("#popup__form_card-add"),popupCardAddButtonSubmit:c("#popup__button_card-add"),placeInputCardAdd:c(".popup__input_type_place"),imgLinkInputCardAdd:c(".popup__input_type_img-link")},J=H.popupCardAddForm,K=H.placeInputCardAdd,Q=H.imgLinkInputCardAdd,X=[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/web-code/moved_yosemite.jpg",alt:"Imagem do vale de Yosemite com um rio, árvores, montanhas ao fundo e muita natureza"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/web-code/moved_lake-louise.jpg",alt:"Imagem do Lago Louise com montanhas ao fundo e natureza exuberante"},{name:"Bald Mountains",link:"https://practicum-content.s3.us-west-1.amazonaws.com/web-code/moved_bald-mountains.jpg",alt:"Imagem das Montanhas Carecas, vegetação com árvores e ao fundo o pör do sol"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/web-code/moved_latemar.jpg",alt:"Imagem do vale de Latemar, montanhas ao fundo e céu estrelado"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/web-code/moved_vanoise.jpg",alt:"Imagem do Parque Nacional Vanoise com Lago, montanhas ao fundo e natureza belissima"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/web-code/moved_lago.jpg",alt:"Imagem do Lago di Braies com um deck, barcos ancorados, montanhas ao fundo e natureza preservada"}],Z=[],tt=u(Z,X),et=n(136),nt=n(17),ot={openPopupCardImg:"img-popup-card__opened",popupCardImgOpen:c("#img-popup-card"),popupCardImg:c(".img-popup-card__image"),popupCardName:c(".img-popup-card__title")},rt=ot.popupCardImg,it=ot.popupCardName;function at(t){return at="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},at(t)}function ut(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,r=function(t,e){if("object"!==at(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==at(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===at(r)?r:String(r)),o)}var r}function ct(t,e){!function(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}(t,e),e.add(t)}function lt(t,e,n){if(!e.has(t))throw new TypeError("attempted to get private field on non-instance");return n}g();var st=new WeakSet,pt=new WeakSet,ft=new WeakSet,mt=new WeakSet,dt=new WeakSet,yt=new WeakSet,bt=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),ct(this,yt),ct(this,dt),ct(this,mt),ct(this,ft),ct(this,pt),ct(this,st),this._validationConfig=e,this._formElement=n,this._PT_BR_ERROR_MESSAGES={valueMissing:"Este campo é obrigatório.",typeMismatch:{email:"Por favor, informe um endereço de e-mail válido.",url:"Por favor, informe uma URL válida."},tooShort:"Por favor, informe pelo menos {minLength} caracteres.",tooLong:"Por favor, informe no máximo {maxLength} caracteres.",patternMismatch:"Por favor, preencha este campo corretamente."}}var e,n;return e=t,(n=[{key:"enableValidation",value:function(){var t=this,e=Array.from(this._formElement.querySelectorAll(".popup__input")),n=this._formElement.querySelector(".popup__button");this._formElement.addEventListener("submit",(function(t){t.preventDefault()})),lt(this,dt,wt).call(this,e,n),e.forEach((function(e){lt(t,yt,St).call(t,e)}))}}])&&ut(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}();function vt(t,e){var n=this._formElement.querySelector(".".concat(t.id,"-error"));t.classList.add(this._validationConfig.inputErrorClass),n.classList.add(this._validationConfig.errorClass);var o=t.validationMessage,r=this._PT_BR_ERROR_MESSAGES[o]||e;n.textContent=r}function _t(t){var e=this._formElement.querySelector(".".concat(t.id,"-error"));e&&(t.classList.remove(this._validationConfig.inputErrorClass),e.classList.remove(this._validationConfig.errorClass),e.textContent="")}function ht(t){t.validity.valid?lt(this,pt,_t).call(this,t):lt(this,st,vt).call(this,t,t.validationMessage)}function gt(t){return t.some((function(t){return!t.validity.valid}))}function wt(t,e){lt(this,mt,gt).call(this,t)?e.classList.add(this._validationConfig.inactiveButtonClass):e.classList.remove(this._validationConfig.inactiveButtonClass)}function St(){var t=this,e=Array.from(this._formElement.querySelectorAll(this._validationConfig.inputSelector)),n=this._formElement.querySelector(this._validationConfig.submitButtonSelector);lt(this,dt,wt).call(this,e,n),e.forEach((function(o){o.addEventListener("input",(function(){lt(t,ft,ht).call(t,o),lt(t,dt,wt).call(t,e,n)}))}))}function Pt(t){return Pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Pt(t)}function jt(t,e){return jt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},jt(t,e)}function Et(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ot(t){return Ot=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ot(t)}function Ct(t,e,n){return(e=It(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function It(t){var e=function(t,e){if("object"!==Pt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==Pt(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===Pt(e)?e:String(e)}var Lt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&jt(t,e)}(i,t);var e,n,o,r=(n=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ot(n);if(o){var r=Ot(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===Pt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Et(t)}(this,t)});function i(t){var e,n=t.nameSelector,o=t.jobSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),Ct(Et(e=r.call(this,".popup")),"_getUserInfo",(function(t){t.preventDefault(),e._name.placeholder="Insira o Nome do Usuário",e._job.placeholder="Insira a sua Profissão",e._open(),U.reset(),e._formValidatorUserInfo.enableValidation()})),Ct(Et(e),"_setUserInfo",(function(t){t.preventDefault();var n,o=e._name.value,r=e._job.value;o&&r&&((n=function(t,e){return t&&e&&!Y.some((function(e){return e.name===t}))?{name:t,job:e}:null}(o,r))&&(G=[n].concat(W(G)),Y=u(G,$)),e._close(),N.textContent=o,z.textContent=r,U.reset(),e._formValidatorUserInfo.enableValidation())})),Ct(Et(e),"_getButtonsForFunctionsUserInfo",(function(){return{"button-edit":e._getUserInfo,popup__button:e._setUserInfo}})),Ct(Et(e),"_handleButtonsForFunctionsUserInfo",(function(t){return h(e._getButtonsForFunctionsUserInfo(),t)})),Ct(Et(e),"setEventListenersUserInfoToDOM",(function(){e._open(),e._close(),e._setEventListeners,_("click",e._handleButtonsForFunctionsUserInfo,document)})),e._name=n,e._job=o,e._open=e.open(),e._close=e.close(),e._setEventListeners=e.setEventListeners();var a=g(U,".popup__input",".popup__button");return e._formValidatorUserInfo=new bt(a,U),e._formValidatorUserInfo.enableValidation(),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(E);function kt(t){return kt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},kt(t)}function At(t,e){return At=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t},At(t,e)}function Tt(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ft(t){return Ft=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)},Ft(t)}function Rt(t,e,n){return(e=Bt(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function Bt(t){var e=function(t,e){if("object"!==kt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==kt(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===kt(e)?e:String(e)}var Dt=function(t){!function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&At(t,e)}(i,t);var e,n,o,r=(n=i,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}(),function(){var t,e=Ft(n);if(o){var r=Ft(this).constructor;t=Reflect.construct(e,arguments,r)}else t=e.apply(this,arguments);return function(t,e){if(e&&("object"===kt(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return Tt(t)}(this,t)});function i(t){var e,n=t.nameSelector,o=t.linkSelector;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i),Rt(Tt(e=r.call(this,".popup_card-add")),"_getInputValues",(function(t){t.preventDefault(),K.placeholder="Insira o Nome do Local",Q.placeholder="Insira o URL da Imagem",e._open(),J.reset(),e._formValidatorPopupWithForm.enableValidation()})),Rt(Tt(e),"_setInputValues",(function(t){t.preventDefault();var n=K.value,o=Q.value;n&&o&&(function(t,e){var n=function(t,e){return t&&e?{name:t,link:e,alt:"Imagem de ".concat(t)}:null}(t,e);n&&(Z=[n].concat(W(Z)),tt=u(Z,X))}(n,o),function(){var t,e=c(".cards"),n=(t=tt,t.map((function(t){return new R(t,"#cards-template").generateInstanceCard()})))[0];e.insertBefore(n,e.firstChild),f(n,0,1,400)}(),e._close(),J.reset(),e._formValidatorPopupWithForm.enableValidation())})),Rt(Tt(e),"_getButtonsForFunctionsPopupWithForm",(function(){return{"button-add":e._getInputValues,"popup__button_card-add":e._setInputValues}})),Rt(Tt(e),"_handleButtonsForFunctionsPopupWithForm",(function(t){return h(e._getButtonsForFunctionsPopupWithForm(),t)})),Rt(Tt(e),"setEventListenersPopupWithFormToDOM",(function(){e._open(),e._close(),e._setEventListeners,_("click",e._handleButtonsForFunctionsPopupWithForm,document)})),e._name=n,e._link=o,e._open=e.open(),e._close=e.close(),e._setEventListeners=e.setEventListeners();var a=g(J,".popup__input",".popup__button");return e._formValidatorPopupWithForm=new bt(a,J),e._formValidatorPopupWithForm.enableValidation(),e}return e=i,Object.defineProperty(e,"prototype",{writable:!1}),e}(E);function Wt(t){return Wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Wt(t)}function xt(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,r=function(t,e){if("object"!==Wt(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==Wt(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===Wt(r)?r:String(r)),o)}var r}var Vt=function(){function t(e,n){var o=e.items,r=e.renderer;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._items=o,this._renderer=r,this._container=c(n)}var e,n;return e=t,(n=[{key:"renderItems",value:function(){var t=this;this._items.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(t){this._container.prepend(t)}}])&&xt(e.prototype,n),Object.defineProperty(e,"prototype",{writable:!1}),t}(),Ut=new Lt({nameSelector:M,jobSelector:q}),Mt=new Dt({nameSelector:K,jobSelector:Q}),qt=new A,Nt=new Vt({items:tt.slice().reverse(),renderer:function(t){var e=new R(t,"#cards-template").generateInstanceCard();Nt.addItem(e)}},".cards");document.addEventListener("DOMContentLoaded",(function(){Ut.setEventListenersUserInfoToDOM(),Mt.setEventListenersPopupWithFormToDOM(),qt.setEventListenerspopupWithImageToDOM(),Nt.renderItems(),function(){var t=c(".cards");_("mousedown",B,t),_("mousedown",D,t)}()}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aUN5QyxHQUFtQixJQUF0Q0MsRUFBSzFDLEVBQUwwQyxNQUFPQyxFQUFRM0MsRUFBUjJDLFUsNEZBQVFqTCxDQUFBLEtBQUE4SyxHQUMzQjlKLEtBQUtrSyxPQUFTRixFQUNkaEssS0FBS21LLFVBQVlGLEVBQ2pCakssS0FBS29LLFdBQWEzTyxFQUFXc08sRUFDL0IsQyxRQVVDLE8sRUFWQUQsRyxFQUFBLEVBQUF2SyxJQUFBLGNBQUFhLE1BRUQsV0FBYyxJQUFBckIsRUFBQSxLQUNaaUIsS0FBS2tLLE9BQU81SixTQUFRLFNBQUMvRSxHQUNuQndELEVBQUtvTCxVQUFVNU8sRUFDakIsR0FDRixHQUFDLENBQUFnRSxJQUFBLFVBQUFhLE1BRUQsU0FBUWlLLEdBQ05ySyxLQUFLb0ssV0FBV0UsUUFBUUQsRUFDMUIsTSxxRUFBQ1AsQ0FBQSxDQWZ5QixHQ1l0QlMsR0FBVyxJQUFJbEQsR0FBUyxDQUM1QkUsYUFBY25FLEVBQ2RvRSxZQUFhbkUsSUFHVG1ILEdBQWUsSUFBSTdCLEdBQWMsQ0FDckNwQixhQUFjbkQsRUFDZG9ELFlBQWFuRCxJQUdUb0csR0FBaUIsSUFBSWhLLEVBSXJCeUksR0FBZSxJQUFJWSxHQUN2QixDQUNFRSxNQUprQnhGLEdBQVM5RyxRQUFRZ04sVUFLbkNULFNBQVUsU0FBQ2IsR0FDVCxJQUNNdUIsRUFEa0IsSUFBSXpKLEVBQUtrSSxFQUFNLG1CQUNIQyx1QkFDcENILEdBQWEwQixRQUFRRCxFQUN2QixHQUVGLFVBZUZoUCxTQUFTc0MsaUJBQWlCLG9CQVJGLFdBQ3RCc00sR0FBU00saUNBQ1RMLEdBQWFNLHNDQUNiTCxHQUFlTSx1Q0FOZjdCLEdBQWE4QixjTjhDYSxXQUMxQixJQUFNOUIsRUFBZXpOLEVBQVcsVUFDaENxQyxFQUFjLFlBQWEwRSxFQUFnQjBHLEdBQzNDcEwsRUFBYyxZQUFhZ0YsRUFBa0JvRyxFQUMvQyxDTTFDRStCLEVBQ0YsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3dlYl9wcm9qZWN0XzRfcHRici93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80X3B0YnIvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNF9wdGJyLy4vc3JjL3V0aWxzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNF9wdGJyLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNF9wdGJyLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNF9wdGJyLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80X3B0YnIvLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzRfcHRici8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNF9wdGJyLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vd2ViX3Byb2plY3RfNF9wdGJyLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly93ZWJfcHJvamVjdF80X3B0YnIvLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3dlYl9wcm9qZWN0XzRfcHRici8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjsiLCJleHBvcnQgY29uc3QgZ2V0QWxsQXJycyA9IChuZXdBcnIsIGluaXRpYWxBcnIpID0+IHtcclxuICByZXR1cm4gW1xyXG4gICAgLi4ubmV3QXJyLm1hcCgoaXRlbSkgPT4gKHsgLi4uaXRlbSB9KSksXHJcbiAgICAuLi5pbml0aWFsQXJyLm1hcCgoaXRlbSkgPT4gKHsgLi4uaXRlbSB9KSksXHJcbiAgXTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBnZXRFbGVtZW50ID0gKHNlbGVjdG9yLCBtZXRob2QgPSBcInF1ZXJ5U2VsZWN0b3JcIikgPT5cclxuICBkb2N1bWVudFttZXRob2RdKHNlbGVjdG9yKTtcclxuXHJcbmV4cG9ydCBjb25zdCBjYWxsSWZGdW5jdGlvbiA9IChjYWxsYmFjaykgPT5cclxuICB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIiAmJiBjYWxsYmFjaygpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHN0eWxlRGlzcGxheVZhbHVlID0gKGRpc3BsYXlWYWx1ZSwgdGFyZ2V0RWxlbWVudCwgY2FsbGJhY2spID0+IHtcclxuICBjYWxsSWZGdW5jdGlvbihjYWxsYmFjayk7XHJcbiAgY29uc3Qgc3R5bGUgPSB0YXJnZXRFbGVtZW50LnN0eWxlO1xyXG4gIHJldHVybiAoc3R5bGUuZGlzcGxheSA9IGRpc3BsYXlWYWx1ZSk7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgY29udGFpbnMgPSAodGFyZ2V0Q2xhc3NOYW1lLCB0YXJnZXRFbGVtZW50KSA9PlxyXG4gIHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKHRhcmdldENsYXNzTmFtZSk7XHJcblxyXG5leHBvcnQgY29uc3QgdG9nZ2xlUG9wdXBEaXNwbGF5ID0gKFxyXG4gIHRhcmdldENsYXNzTmFtZSxcclxuICB0YXJnZXRFbGVtZW50LFxyXG4gIGNhbGxiYWNrXHJcbikgPT4ge1xyXG4gIGNvbnN0IGlzT3BlbiA9IGNvbnRhaW5zKHRhcmdldENsYXNzTmFtZSwgdGFyZ2V0RWxlbWVudCk7XHJcbiAgc3R5bGVEaXNwbGF5VmFsdWUoaXNPcGVuID8gXCJoaWRkZW5cIiA6IFwiYmxvY2tcIiwgdGFyZ2V0RWxlbWVudCwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlbW92ZVBvcHVwRGlzcGxheSA9IChcclxuICB0YXJnZXRDbGFzc05hbWUsXHJcbiAgdGFyZ2V0RWxlbWVudCxcclxuICBjYWxsYmFja1xyXG4pID0+IHtcclxuICBjb25zdCBpc09wZW4gPSBjb250YWlucyh0YXJnZXRDbGFzc05hbWUsIHRhcmdldEVsZW1lbnQpO1xyXG4gIHN0eWxlRGlzcGxheVZhbHVlKGlzT3BlbiA/IFwiaGlkZGVuXCIgOiBcIm51bGxcIiwgdGFyZ2V0RWxlbWVudCwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZFBvcHVwRGlzcGxheSA9ICh0YXJnZXRDbGFzc05hbWUsIHRhcmdldEVsZW1lbnQsIGNhbGxiYWNrKSA9PiB7XHJcbiAgY29uc3QgaXNPcGVuID0gY29udGFpbnModGFyZ2V0Q2xhc3NOYW1lLCB0YXJnZXRFbGVtZW50KTtcclxuICBzdHlsZURpc3BsYXlWYWx1ZShpc09wZW4gPyBcIm51bGxcIiA6IFwiYmxvY2tcIiwgdGFyZ2V0RWxlbWVudCwgY2FsbGJhY2spO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHRvZ2dsZSA9ICh0YXJnZXRDbGFzc05hbWUsIHRhcmdldEVsZW1lbnQpID0+XHJcbiAgdGFyZ2V0RWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKHRhcmdldENsYXNzTmFtZSk7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlID0gKHRhcmdldENsYXNzTmFtZSwgdGFyZ2V0RWxlbWVudCkgPT5cclxuICB0YXJnZXRFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGFyZ2V0Q2xhc3NOYW1lKTtcclxuXHJcbmV4cG9ydCBjb25zdCBhZGQgPSAodGFyZ2V0Q2xhc3NOYW1lLCB0YXJnZXRFbGVtZW50KSA9PlxyXG4gIHRhcmdldEVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0YXJnZXRDbGFzc05hbWUpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFuaW1hdGVPcGFjaXR5ID0gKFxyXG4gIHRhcmdldEVsZW1lbnQsXHJcbiAgc3RhcnRPcGFjaXR5LFxyXG4gIGVuZE9wYWNpdHksXHJcbiAgZHVyYXRpb24sXHJcbiAgcmVtb3ZlT25GaW5pc2ggPSBmYWxzZVxyXG4pID0+IHtcclxuICB0YXJnZXRFbGVtZW50LmFuaW1hdGUoW3sgb3BhY2l0eTogc3RhcnRPcGFjaXR5IH0sIHsgb3BhY2l0eTogZW5kT3BhY2l0eSB9XSwge1xyXG4gICAgZHVyYXRpb246IGR1cmF0aW9uLFxyXG4gICAgZWFzaW5nOiBcImVhc2UtaW4tb3V0XCIsXHJcbiAgfSkub25maW5pc2ggPSAoKSA9PiB7XHJcbiAgICBpZiAocmVtb3ZlT25GaW5pc2gpIHtcclxuICAgICAgdGFyZ2V0RWxlbWVudC5yZW1vdmUoKTtcclxuICAgIH1cclxuICB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNldEF0dHJpYnV0ZXMgPSAodGFyZ2V0RWxlbWVudCwgYXR0cmlidXRlcykgPT4ge1xyXG4gIGZvciAobGV0IGF0dHJpYnV0ZSBpbiBhdHRyaWJ1dGVzKSB7XHJcbiAgICB0YXJnZXRFbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGUsIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGdldFN0YXJ0c1dpdGhEb3QgPSAoc3RyaW5nKSA9PiBzdHJpbmcuc3RhcnRzV2l0aChcIi5cIik7XHJcblxyXG5leHBvcnQgY29uc3QgcmVtb3ZlU3RhcnRpbmdEb3QgPSAoc3RyaW5nKSA9PiAoKSA9PlxyXG4gIGdldFN0YXJ0c1dpdGhEb3Qoc3RyaW5nKSA/IHN0cmluZy5zbGljZSgxKSA6IHN0cmluZztcclxuXHJcbmV4cG9ydCBjb25zdCBhZGRTdGFydGluZ0RvdCA9IChzdHJpbmcpID0+ICgpID0+XHJcbiAgZ2V0U3RhcnRzV2l0aERvdChzdHJpbmcpID8gc3RyaW5nIDogXCIuXCIgKyBzdHJpbmc7XHJcblxyXG5leHBvcnQgY29uc3QgZXZ0VGFyZ2V0Q2xvc2VzdEVsZW1lbnQgPSAodGFyZ2V0Q2xhc3NOYW1lLCB0YXJnZXRFbGVtZW50KSA9PlxyXG4gIHRhcmdldEVsZW1lbnQuY2xvc2VzdChhZGRTdGFydGluZ0RvdCh0YXJnZXRDbGFzc05hbWUpKCkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGlzVGFyZ2V0RWxlbWVudENsaWNrZWQgPSAodGFyZ2V0Q2xhc3NOYW1lLCB0YXJnZXRFbGVtZW50KSA9PlxyXG4gIGNvbnRhaW5zKHRhcmdldENsYXNzTmFtZSwgdGFyZ2V0RWxlbWVudCkgJiZcclxuICBldnRUYXJnZXRDbG9zZXN0RWxlbWVudChyZW1vdmVTdGFydGluZ0RvdCh0YXJnZXRDbGFzc05hbWUpKCksIHRhcmdldEVsZW1lbnQpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGhhbmRsZUtleVByZXNzRnVuY3Rpb24gPSAocmVtb3ZlUG9wdXBGdW5jKSA9PiAoZXZ0KSA9PlxyXG4gIGV2dC5rZXkgPT09IFwiRXNjYXBlXCIgPyBjYWxsSWZGdW5jdGlvbihyZW1vdmVQb3B1cEZ1bmMpIDogbnVsbDtcclxuXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVPdXRzaWRlQ2xpY2tGdW5jdGlvbiA9XHJcbiAgKHRhcmdldENsYXNzTmFtZSwgcmVtb3ZlUG9wdXBGdW5jKSA9PiAoZXZ0KSA9PlxyXG4gICAgaXNUYXJnZXRFbGVtZW50Q2xpY2tlZCh0YXJnZXRDbGFzc05hbWUsIGV2dC50YXJnZXQpXHJcbiAgICAgID8gY2FsbElmRnVuY3Rpb24ocmVtb3ZlUG9wdXBGdW5jKVxyXG4gICAgICA6IG51bGw7XHJcblxyXG5leHBvcnQgY29uc3QgYWRkRXZlbnRUb0RPTSA9IChldnQsIGhhbmRsZXIsIHRhcmdldEVsZW1lbnQpID0+XHJcbiAgdGFyZ2V0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKGV2dCwgaGFuZGxlcik7XHJcblxyXG5leHBvcnQgY29uc3QgYWRkRXZ0QnV0dG9uc0ZvckZ1bmN0aW9ucyA9IChidXR0b25GdW5jdGlvbnMsIGV2dCkgPT4ge1xyXG4gIGNvbnN0IGJ1dHRvbkZ1bmN0aW9uSWQgPSBidXR0b25GdW5jdGlvbnNbZXZ0LnRhcmdldC5pZF07XHJcbiAgYnV0dG9uRnVuY3Rpb25JZCA/IGJ1dHRvbkZ1bmN0aW9uSWQoZXZ0KSA6IG51bGw7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZ2V0VmFsaWRhdGlvbiA9IChcclxuICBmb3JtU2VsZWN0b3IsXHJcbiAgaW5wdXRTZWxlY3RvcixcclxuICBzdWJtaXRCdXR0b25TZWxlY3RvclxyXG4pID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgZm9ybVNlbGVjdG9yLFxyXG4gICAgaW5wdXRTZWxlY3RvcixcclxuICAgIHN1Ym1pdEJ1dHRvblNlbGVjdG9yLFxyXG4gICAgaW5hY3RpdmVCdXR0b25DbGFzczogXCJwb3B1cF9fYnV0dG9uX2Rpc2FibGVkXCIsXHJcbiAgICBpbnB1dEVycm9yQ2xhc3M6IFwicG9wdXBfX2lucHV0X3R5cGVfZXJyb3JcIixcclxuICAgIGVycm9yQ2xhc3M6IFwicG9wdXBfX2Vycm9yX3Zpc2libGVcIixcclxuICB9O1xyXG59O1xyXG4iLCJpbXBvcnQge1xyXG4gIGdldEVsZW1lbnQsXHJcbiAgcmVtb3ZlU3RhcnRpbmdEb3QsXHJcbiAgYWRkLFxyXG4gIGFkZFBvcHVwRGlzcGxheSxcclxuICByZW1vdmUsXHJcbiAgcmVtb3ZlUG9wdXBEaXNwbGF5LFxyXG4gIGhhbmRsZUtleVByZXNzRnVuY3Rpb24sXHJcbiAgaGFuZGxlT3V0c2lkZUNsaWNrRnVuY3Rpb24sXHJcbiAgYWRkRXZlbnRUb0RPTSxcclxufSBmcm9tIFwiLi4vdXRpbHMvaGVscGVycy5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHRhcmdldEVsZW1lbnQpIHtcclxuICAgIHRoaXMuX3BvcHVwRWxlbWVudCA9IGdldEVsZW1lbnQodGFyZ2V0RWxlbWVudCk7XHJcbiAgICB0aGlzLl9wb3B1cEVsZW1lbnRXaXRob3V0RG90ID0gcmVtb3ZlU3RhcnRpbmdEb3QodGFyZ2V0RWxlbWVudCkoKTtcclxuICAgIHRoaXMuX29wZW5lZENsYXNzTmFtZSA9IGAke3RoaXMuX3BvcHVwRWxlbWVudFdpdGhvdXREb3R9X19vcGVuZWRgO1xyXG4gICAgdGhpcy5fY2xvc2VCdXR0b25zID0gQXJyYXkuZnJvbShcclxuICAgICAgZ2V0RWxlbWVudCgnW2lkJD1cIl9fY2xvc2VkLWJ0blwiXScsIFwicXVlcnlTZWxlY3RvckFsbFwiKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIF9jcmVhdGVDYWxsYmFja0FkZERpc3BsYXkgPSAoKSA9PiAoKSA9PlxyXG4gICAgYWRkKHRoaXMuX29wZW5lZENsYXNzTmFtZSwgdGhpcy5fcG9wdXBFbGVtZW50KTtcclxuXHJcbiAgX2NyZWF0ZUNhbGxiYWNrUmVtb3ZlRGlzcGxheSA9ICgpID0+ICgpID0+IHtcclxuICAgIHJlbW92ZSh0aGlzLl9vcGVuZWRDbGFzc05hbWUsIHRoaXMuX3BvcHVwRWxlbWVudCk7XHJcbiAgfTtcclxuXHJcbiAgX2hhbmRsZUVzY0Nsb3NlID0gKCkgPT4ge1xyXG4gICAgYWRkRXZlbnRUb0RPTShcclxuICAgICAgXCJrZXlkb3duXCIsXHJcbiAgICAgIGhhbmRsZUtleVByZXNzRnVuY3Rpb24odGhpcy5fY3JlYXRlQ2FsbGJhY2tSZW1vdmVEaXNwbGF5KCkpLFxyXG4gICAgICBkb2N1bWVudFxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBfaGFuZGxlT3V0c2lkZUNsaWNrQ2xvc2UgPSAoKSA9PiB7XHJcbiAgICBhZGRFdmVudFRvRE9NKFxyXG4gICAgICBcIm1vdXNlZG93blwiLFxyXG4gICAgICBoYW5kbGVPdXRzaWRlQ2xpY2tGdW5jdGlvbihcclxuICAgICAgICB0aGlzLl9wb3B1cEVsZW1lbnRXaXRob3V0RG90LFxyXG4gICAgICAgIHRoaXMuX2NyZWF0ZUNhbGxiYWNrUmVtb3ZlRGlzcGxheSgpXHJcbiAgICAgICksXHJcbiAgICAgIHRoaXMuX3BvcHVwRWxlbWVudFxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBfZ2V0Q2xvc2VCdXR0b25zQW5kQWRkRXZlbnRMaXN0ZW5lcigpIHtcclxuICAgIHRoaXMuX2Nsb3NlQnV0dG9ucy5mb3JFYWNoKChidXR0b24pID0+IHtcclxuICAgICAgYWRkRXZlbnRUb0RPTShcclxuICAgICAgICBcIm1vdXNlZG93blwiLFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIHRoaXMuY2xvc2UoKSgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYnV0dG9uXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIG9wZW4gPSAoKSA9PiAoKSA9PiB7XHJcbiAgICBhZGRQb3B1cERpc3BsYXkoXHJcbiAgICAgIHRoaXMuX29wZW5lZENsYXNzTmFtZSxcclxuICAgICAgdGhpcy5fcG9wdXBFbGVtZW50LFxyXG4gICAgICB0aGlzLl9jcmVhdGVDYWxsYmFja0FkZERpc3BsYXkoKVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICBjbG9zZSA9ICgpID0+ICgpID0+IHtcclxuICAgIHJlbW92ZVBvcHVwRGlzcGxheShcclxuICAgICAgdGhpcy5fb3BlbmVkQ2xhc3NOYW1lLFxyXG4gICAgICB0aGlzLl9wb3B1cEVsZW1lbnQsXHJcbiAgICAgIHRoaXMuX2NyZWF0ZUNhbGxiYWNrUmVtb3ZlRGlzcGxheSgpXHJcbiAgICApO1xyXG4gIH07XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzID0gKCkgPT4ge1xyXG4gICAgdGhpcy5faGFuZGxlRXNjQ2xvc2UoKTtcclxuICAgIHRoaXMuX2hhbmRsZU91dHNpZGVDbGlja0Nsb3NlKCk7XHJcbiAgICB0aGlzLl9nZXRDbG9zZUJ1dHRvbnNBbmRBZGRFdmVudExpc3RlbmVyKCk7XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXAuanNcIjtcclxuaW1wb3J0IHsgQ2FyZCB9IGZyb20gXCIuL0NhcmQuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCIuaW1nLXBvcHVwLWNhcmRcIik7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycyA9IHRoaXMuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJDYXJkID1cclxuICAgICAgQ2FyZC5wcm90b3R5cGUuc2V0RXZlbnRMaXN0ZW5lckZyb21Qb3B1cFdpdGhJbWFnZTtcclxuICAgIHRoaXMub3BlbiA9IHRoaXMub3BlbigpO1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnNwb3B1cFdpdGhJbWFnZVRvRE9NID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnM7XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4vUG9wdXBXaXRoSW1hZ2UuanNcIjtcclxuaW1wb3J0IHtcclxuICBwb3B1cENhcmRJbWcsXHJcbiAgcG9wdXBDYXJkTmFtZSxcclxuICBoZWFydEljb25FbmFibGVkLFxyXG4gIGhlYXJ0SWNvbkRpc2FibGVkLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuaW1wb3J0IHtcclxuICBnZXRFbGVtZW50LFxyXG4gIGFkZEV2ZW50VG9ET00sXHJcbiAgaXNUYXJnZXRFbGVtZW50Q2xpY2tlZCxcclxuICBldnRUYXJnZXRDbG9zZXN0RWxlbWVudCxcclxuICBhbmltYXRlT3BhY2l0eSxcclxuICBzZXRBdHRyaWJ1dGVzLFxyXG59IGZyb20gXCIuLi91dGlscy9oZWxwZXJzLmpzXCI7XHJcblxyXG5jbGFzcyBDYXJkIHtcclxuICBjb25zdHJ1Y3RvcihkYXRhLCB0ZW1wbGF0ZVNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9kYXRhID0gZGF0YTtcclxuICAgIHRoaXMuX3RlbXBsYXRlU2VsZWN0b3IgPSB0ZW1wbGF0ZVNlbGVjdG9yO1xyXG4gICAgdGhpcy5fY2FyZEVsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xyXG4gICAgdGhpcy5fY2FyZEltYWdlID0gdGhpcy5fY2FyZEVsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYXJkX19pbWFnZVwiKTtcclxuICAgIHRoaXMuX2NhcmRUaXRsZSA9IHRoaXMuX2NhcmRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FyZF9fdGl0bGVcIik7XHJcbiAgICB0aGlzLnNldEV2ZW50TGlzdGVuZXJGcm9tUG9wdXBXaXRoSW1hZ2UoKTtcclxuICB9XHJcblxyXG4gIF9nZXRUZW1wbGF0ZSgpIHtcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gZ2V0RWxlbWVudCh0aGlzLl90ZW1wbGF0ZVNlbGVjdG9yKTtcclxuICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gdGVtcGxhdGUuY29udGVudC5xdWVyeVNlbGVjdG9yKFwiLmNhcmRcIikuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gIH1cclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lckZyb21Qb3B1cFdpdGhJbWFnZSgpIHtcclxuICAgIHRoaXMuX2NhcmRJbWFnZS5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsICgpID0+IHtcclxuICAgICAgY29uc3QgcG9wdXBXaXRoSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoKTtcclxuICAgICAgcG9wdXBXaXRoSW1hZ2Uub3BlbigpO1xyXG4gICAgICBwb3B1cENhcmRJbWcuc3JjID0gdGhpcy5fZGF0YS5saW5rO1xyXG4gICAgICBwb3B1cENhcmROYW1lLnRleHRDb250ZW50ID0gdGhpcy5fZGF0YS5uYW1lO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBnZW5lcmF0ZUluc3RhbmNlQ2FyZCgpIHtcclxuICAgIHNldEF0dHJpYnV0ZXModGhpcy5fY2FyZEltYWdlLCB7XHJcbiAgICAgIHNyYzogdGhpcy5fZGF0YS5saW5rLFxyXG4gICAgICBhbHQ6IGBJbWFnZW0gZGUgJHt0aGlzLl9kYXRhLm5hbWV9YCxcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fY2FyZFRpdGxlLnRleHRDb250ZW50ID0gdGhpcy5fZGF0YS5uYW1lO1xyXG4gICAgcmV0dXJuIHRoaXMuX2NhcmRFbGVtZW50O1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgcmVuZGVyQ2FyZHMgPSAoY2FyZHMpID0+IHtcclxuICBjb25zdCB0ZW1wbGF0ZVNlbGVjdG9yID0gXCIjY2FyZHMtdGVtcGxhdGVcIjtcclxuICByZXR1cm4gY2FyZHMubWFwKChjYXJkKSA9PiB7XHJcbiAgICBjb25zdCBuZXdDYXJkSW5zdGFuY2UgPSBuZXcgQ2FyZChjYXJkLCB0ZW1wbGF0ZVNlbGVjdG9yKTtcclxuICAgIHJldHVybiBuZXdDYXJkSW5zdGFuY2UuZ2VuZXJhdGVJbnN0YW5jZUNhcmQoKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZUNhcmRMaWtlID0gKGV2dCkgPT4ge1xyXG4gIGlmIChpc1RhcmdldEVsZW1lbnRDbGlja2VkKFwiYnV0dG9uLWhlYXJ0LWljb25cIiwgZXZ0LnRhcmdldCkpIHtcclxuICAgIGNvbnN0IGhlYXJ0SWNvbiA9IGV2dFRhcmdldENsb3Nlc3RFbGVtZW50KFwiYnV0dG9uLWhlYXJ0LWljb25cIiwgZXZ0LnRhcmdldCk7XHJcbiAgICBjb25zdCBpc0FjdGl2ZSA9IGhlYXJ0SWNvbi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWFjdGl2ZVwiKSA9PT0gXCJ0cnVlXCI7XHJcbiAgICBoZWFydEljb24uc2V0QXR0cmlidXRlKFwiZGF0YS1hY3RpdmVcIiwgIWlzQWN0aXZlKTtcclxuICAgIHNldEF0dHJpYnV0ZXMoXHJcbiAgICAgIGhlYXJ0SWNvbixcclxuICAgICAgaXNBY3RpdmVcclxuICAgICAgICA/IHtcclxuICAgICAgICAgICAgc3JjOiBoZWFydEljb25EaXNhYmxlZCxcclxuICAgICAgICAgICAgYWx0OiBcIkljb24gZGUgY29yYcOnw6NvIGRlc2F0aXZhZG8gYXBlbmFzIGNvbSBib3JkYXNcIixcclxuICAgICAgICAgIH1cclxuICAgICAgICA6IHtcclxuICAgICAgICAgICAgc3JjOiBoZWFydEljb25FbmFibGVkLFxyXG4gICAgICAgICAgICBhbHQ6IFwiSWNvbiBkZSBjb3Jhw6fDo28gYXRpdmFkbyBjb20gcHJlZW5jaGltZW50b1wiLFxyXG4gICAgICAgICAgfVxyXG4gICAgKTtcclxuICAgIGFuaW1hdGVPcGFjaXR5KGhlYXJ0SWNvbiwgMCwgMSwgNDAwKTtcclxuICB9XHJcbn07XHJcblxyXG5jb25zdCBoYW5kbGVDYXJkRGVsZXRlID0gKGV2dCkgPT4ge1xyXG4gIGlmIChpc1RhcmdldEVsZW1lbnRDbGlja2VkKFwiYnV0dG9uLXRyYXNoLWljb25cIiwgZXZ0LnRhcmdldCkpIHtcclxuICAgIGNvbnN0IGNhcmREZWxldGUgPSBldnRUYXJnZXRDbG9zZXN0RWxlbWVudChcImNhcmRcIiwgZXZ0LnRhcmdldCk7XHJcbiAgICBhbmltYXRlT3BhY2l0eShjYXJkRGVsZXRlLCAxLCAwLCA0MDAsIHRydWUpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IGFkZEV2ZW50c0NhcmRzVG9ET00gPSAoKSA9PiB7XHJcbiAgY29uc3QgY2FyZHNTZWN0aW9uID0gZ2V0RWxlbWVudChcIi5jYXJkc1wiKTtcclxuICBhZGRFdmVudFRvRE9NKFwibW91c2Vkb3duXCIsIGhhbmRsZUNhcmRMaWtlLCBjYXJkc1NlY3Rpb24pO1xyXG4gIGFkZEV2ZW50VG9ET00oXCJtb3VzZWRvd25cIiwgaGFuZGxlQ2FyZERlbGV0ZSwgY2FyZHNTZWN0aW9uKTtcclxufTtcclxuXHJcbmV4cG9ydCB7IENhcmQsIHJlbmRlckNhcmRzLCBhZGRFdmVudHNDYXJkc1RvRE9NIH07XHJcbiIsImltcG9ydCB7IGdldEFsbEFycnMsIGdldEVsZW1lbnQsIGFuaW1hdGVPcGFjaXR5IH0gZnJvbSBcIi4vaGVscGVycy5qc1wiO1xyXG5pbXBvcnQgeyByZW5kZXJDYXJkcyB9IGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCB7XHJcbiAgb3BlblBvcHVwUHJvZmlsZSxcclxuICBwb3B1cFByb2ZpbGUsXHJcbiAgcG9wdXBQcm9maWxlRm9ybSxcclxuICBuYW1lSW5wdXRQcm9maWxlLFxyXG4gIGpvYklucHV0UHJvZmlsZSxcclxuICBuYW1lT3V0cHV0UHJvZmlsZSxcclxuICBqb2JPdXRwdXRQcm9maWxlLFxyXG4gIGJ0blN1Ym1pdFByb2ZpbGUsXHJcbiAgYnRuQ2xvc2VQcm9maWxlLFxyXG4gIGJ0bkVkaXRQcm9maWxlLFxyXG59ID0ge1xyXG4gIG9wZW5Qb3B1cFByb2ZpbGU6IFwicG9wdXBfX29wZW5lZFwiLFxyXG4gIHBvcHVwUHJvZmlsZTogZ2V0RWxlbWVudChcIiNwb3B1cFwiKSxcclxuICBwb3B1cFByb2ZpbGVGb3JtOiBnZXRFbGVtZW50KFwiLnBvcHVwX19mb3JtXCIpLFxyXG4gIG5hbWVJbnB1dFByb2ZpbGU6IGdldEVsZW1lbnQoXCIucG9wdXBfX2lucHV0X3R5cGVfbmFtZVwiKSxcclxuICBqb2JJbnB1dFByb2ZpbGU6IGdldEVsZW1lbnQoXCIucG9wdXBfX2lucHV0X3R5cGVfam9iXCIpLFxyXG4gIG5hbWVPdXRwdXRQcm9maWxlOiBnZXRFbGVtZW50KFwiLmhlYWRlcl9fdGl0bGVcIiksXHJcbiAgam9iT3V0cHV0UHJvZmlsZTogZ2V0RWxlbWVudChcIi5oZWFkZXJfX3N1YnRpdGxlXCIpLFxyXG4gIGJ0blN1Ym1pdFByb2ZpbGU6IGdldEVsZW1lbnQoXCIucG9wdXBfX2J1dHRvblwiKSxcclxuICBidG5DbG9zZVByb2ZpbGU6IGdldEVsZW1lbnQoXCIucG9wdXBfX2Nsb3NlZC1idG5cIiksXHJcbiAgYnRuRWRpdFByb2ZpbGU6IGdldEVsZW1lbnQoXCIuYnV0dG9uLWVkaXRcIiksXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbFByb2ZpbGUgPSBbXHJcbiAge1xyXG4gICAgbmFtZTogbmFtZU91dHB1dFByb2ZpbGUudGV4dENvbnRlbnQsXHJcbiAgICBqb2I6IGpvYk91dHB1dFByb2ZpbGUudGV4dENvbnRlbnQsXHJcbiAgfSxcclxuXTtcclxuXHJcbmV4cG9ydCBsZXQgbmV3UHJvZmlsZXMgPSBbXTtcclxuXHJcbmV4cG9ydCBsZXQgYWxsUHJvZmlsZXMgPSBnZXRBbGxBcnJzKG5ld1Byb2ZpbGVzLCBpbml0aWFsUHJvZmlsZSk7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlTmV3UHJvZmlsZSA9IChuYW1lLCBqb2IpID0+XHJcbiAgbmFtZSAmJiBqb2IgJiYgIWFsbFByb2ZpbGVzLnNvbWUoKHByb2ZpbGUpID0+IHByb2ZpbGUubmFtZSA9PT0gbmFtZSlcclxuICAgID8geyBuYW1lLCBqb2IgfVxyXG4gICAgOiBudWxsO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZE5ld1Byb2ZpbGUgPSAobmFtZSwgam9iKSA9PiB7XHJcbiAgY29uc3QgbmV3UHJvZmlsZSA9IGNyZWF0ZU5ld1Byb2ZpbGUobmFtZSwgam9iKTtcclxuICBpZiAobmV3UHJvZmlsZSkge1xyXG4gICAgbmV3UHJvZmlsZXMgPSBbbmV3UHJvZmlsZSwgLi4ubmV3UHJvZmlsZXNdO1xyXG4gICAgYWxsUHJvZmlsZXMgPSBnZXRBbGxBcnJzKG5ld1Byb2ZpbGVzLCBpbml0aWFsUHJvZmlsZSk7XHJcbiAgfVxyXG4gIHJldHVybiB7IGFsbFByb2ZpbGVzLCBuZXdQcm9maWxlcyB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHtcclxuICBvcGVuUG9wdXBDYXJkQWRkLFxyXG4gIHBvcHVwQ2FyZEFkZCxcclxuICBwb3B1cENhcmRBZGRGb3JtLFxyXG4gIHBvcHVwQ2FyZEFkZEJ1dHRvblN1Ym1pdCxcclxuICBwbGFjZUlucHV0Q2FyZEFkZCxcclxuICBpbWdMaW5rSW5wdXRDYXJkQWRkLFxyXG59ID0ge1xyXG4gIG9wZW5Qb3B1cENhcmRBZGQ6IFwicG9wdXBfY2FyZC1hZGRfX29wZW5lZFwiLFxyXG4gIHBvcHVwQ2FyZEFkZDogZ2V0RWxlbWVudChcIiNwb3B1cF9jYXJkLWFkZFwiKSxcclxuICBwb3B1cENhcmRBZGRGb3JtOiBnZXRFbGVtZW50KFwiI3BvcHVwX19mb3JtX2NhcmQtYWRkXCIpLFxyXG4gIHBvcHVwQ2FyZEFkZEJ1dHRvblN1Ym1pdDogZ2V0RWxlbWVudChcIiNwb3B1cF9fYnV0dG9uX2NhcmQtYWRkXCIpLFxyXG4gIHBsYWNlSW5wdXRDYXJkQWRkOiBnZXRFbGVtZW50KFwiLnBvcHVwX19pbnB1dF90eXBlX3BsYWNlXCIpLFxyXG4gIGltZ0xpbmtJbnB1dENhcmRBZGQ6IGdldEVsZW1lbnQoXCIucG9wdXBfX2lucHV0X3R5cGVfaW1nLWxpbmtcIiksXHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgaW5pdGlhbENhcmRzID0gW1xyXG4gIHtcclxuICAgIG5hbWU6IFwiWW9zZW1pdGUgVmFsbGV5XCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vd2ViLWNvZGUvbW92ZWRfeW9zZW1pdGUuanBnXCIsXHJcbiAgICBhbHQ6IFwiSW1hZ2VtIGRvIHZhbGUgZGUgWW9zZW1pdGUgY29tIHVtIHJpbywgw6Fydm9yZXMsIG1vbnRhbmhhcyBhbyBmdW5kbyBlIG11aXRhIG5hdHVyZXphXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxha2UgTG91aXNlXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vd2ViLWNvZGUvbW92ZWRfbGFrZS1sb3Vpc2UuanBnXCIsXHJcbiAgICBhbHQ6IFwiSW1hZ2VtIGRvIExhZ28gTG91aXNlIGNvbSBtb250YW5oYXMgYW8gZnVuZG8gZSBuYXR1cmV6YSBleHViZXJhbnRlXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkJhbGQgTW91bnRhaW5zXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vd2ViLWNvZGUvbW92ZWRfYmFsZC1tb3VudGFpbnMuanBnXCIsXHJcbiAgICBhbHQ6IFwiSW1hZ2VtIGRhcyBNb250YW5oYXMgQ2FyZWNhcywgdmVnZXRhw6fDo28gY29tIMOhcnZvcmVzIGUgYW8gZnVuZG8gbyBww7ZyIGRvIHNvbFwiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJMYXRlbWFyXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vd2ViLWNvZGUvbW92ZWRfbGF0ZW1hci5qcGdcIixcclxuICAgIGFsdDogXCJJbWFnZW0gZG8gdmFsZSBkZSBMYXRlbWFyLCBtb250YW5oYXMgYW8gZnVuZG8gZSBjw6l1IGVzdHJlbGFkb1wiLFxyXG4gIH0sXHJcbiAge1xyXG4gICAgbmFtZTogXCJWYW5vaXNlIE5hdGlvbmFsIFBhcmtcIixcclxuICAgIGxpbms6IFwiaHR0cHM6Ly9wcmFjdGljdW0tY29udGVudC5zMy51cy13ZXN0LTEuYW1hem9uYXdzLmNvbS93ZWItY29kZS9tb3ZlZF92YW5vaXNlLmpwZ1wiLFxyXG4gICAgYWx0OiBcIkltYWdlbSBkbyBQYXJxdWUgTmFjaW9uYWwgVmFub2lzZSBjb20gTGFnbywgbW9udGFuaGFzIGFvIGZ1bmRvIGUgbmF0dXJlemEgYmVsaXNzaW1hXCIsXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiBcIkxhZ28gZGkgQnJhaWVzXCIsXHJcbiAgICBsaW5rOiBcImh0dHBzOi8vcHJhY3RpY3VtLWNvbnRlbnQuczMudXMtd2VzdC0xLmFtYXpvbmF3cy5jb20vd2ViLWNvZGUvbW92ZWRfbGFnby5qcGdcIixcclxuICAgIGFsdDogXCJJbWFnZW0gZG8gTGFnbyBkaSBCcmFpZXMgY29tIHVtIGRlY2ssIGJhcmNvcyBhbmNvcmFkb3MsIG1vbnRhbmhhcyBhbyBmdW5kbyBlIG5hdHVyZXphIHByZXNlcnZhZGFcIixcclxuICB9LFxyXG5dO1xyXG5cclxuZXhwb3J0IGxldCBuZXdDYXJkcyA9IFtdO1xyXG5cclxuZXhwb3J0IGxldCBhbGxDYXJkcyA9IGdldEFsbEFycnMobmV3Q2FyZHMsIGluaXRpYWxDYXJkcyk7XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlTmV3Q2FyZCA9IChuYW1lLCBsaW5rKSA9PlxyXG4gIG5hbWUgJiYgbGluayA/IHsgbmFtZSwgbGluaywgYWx0OiBgSW1hZ2VtIGRlICR7bmFtZX1gIH0gOiBudWxsO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZE5ld0NhcmQgPSAobmFtZSwgbGluaykgPT4ge1xyXG4gIGNvbnN0IG5ld0NhcmQgPSBjcmVhdGVOZXdDYXJkKG5hbWUsIGxpbmspO1xyXG4gIGlmIChuZXdDYXJkKSB7XHJcbiAgICBuZXdDYXJkcyA9IFtuZXdDYXJkLCAuLi5uZXdDYXJkc107XHJcbiAgICBhbGxDYXJkcyA9IGdldEFsbEFycnMobmV3Q2FyZHMsIGluaXRpYWxDYXJkcyk7XHJcbiAgfVxyXG4gIHJldHVybiB7IGFsbENhcmRzLCBuZXdDYXJkcyB9O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZE5ld0NhcmRUb0RPTSA9ICgpID0+IHtcclxuICBjb25zdCBjYXJkc1NlY3Rpb24gPSBnZXRFbGVtZW50KFwiLmNhcmRzXCIpO1xyXG4gIGNvbnN0IG5ld0NhcmRUb0RPTSA9IHJlbmRlckNhcmRzKGFsbENhcmRzKVswXTtcclxuICBjYXJkc1NlY3Rpb24uaW5zZXJ0QmVmb3JlKG5ld0NhcmRUb0RPTSwgY2FyZHNTZWN0aW9uLmZpcnN0Q2hpbGQpO1xyXG4gIGFuaW1hdGVPcGFjaXR5KG5ld0NhcmRUb0RPTSwgMCwgMSwgNDAwKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBoZWFydEljb25FbmFibGVkID0gcmVxdWlyZShcIi4uL2ltYWdlcy9oZWFydF9pY29uX2VuYWJsZWQucG5nXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGhlYXJ0SWNvbkRpc2FibGVkID0gcmVxdWlyZShcIi4uL2ltYWdlcy9oZWFydF9pY29uX2Rpc2FibGVkLnBuZ1wiKTtcclxuXHJcbmV4cG9ydCBjb25zdCB7XHJcbiAgb3BlblBvcHVwQ2FyZEltZyxcclxuICBwb3B1cENhcmRJbWdPcGVuLFxyXG4gIHBvcHVwQ2FyZEltZyxcclxuICBwb3B1cENhcmROYW1lLFxyXG59ID0ge1xyXG4gIG9wZW5Qb3B1cENhcmRJbWc6IFwiaW1nLXBvcHVwLWNhcmRfX29wZW5lZFwiLFxyXG4gIHBvcHVwQ2FyZEltZ09wZW46IGdldEVsZW1lbnQoXCIjaW1nLXBvcHVwLWNhcmRcIiksXHJcbiAgcG9wdXBDYXJkSW1nOiBnZXRFbGVtZW50KFwiLmltZy1wb3B1cC1jYXJkX19pbWFnZVwiKSxcclxuICBwb3B1cENhcmROYW1lOiBnZXRFbGVtZW50KFwiLmltZy1wb3B1cC1jYXJkX190aXRsZVwiKSxcclxufTtcclxuIiwiaW1wb3J0IHsgZ2V0VmFsaWRhdGlvbiB9IGZyb20gXCIuLi91dGlscy9oZWxwZXJzXCI7XHJcblxyXG5nZXRWYWxpZGF0aW9uKCk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNlRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IodmFsaWRhdGlvbkNvbmZpZywgZm9ybUVsZW1lbnQpIHtcclxuICAgIHRoaXMuX3ZhbGlkYXRpb25Db25maWcgPSB2YWxpZGF0aW9uQ29uZmlnO1xyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQgPSBmb3JtRWxlbWVudDtcclxuICAgIHRoaXMuX1BUX0JSX0VSUk9SX01FU1NBR0VTID0ge1xyXG4gICAgICB2YWx1ZU1pc3Npbmc6IFwiRXN0ZSBjYW1wbyDDqSBvYnJpZ2F0w7NyaW8uXCIsXHJcbiAgICAgIHR5cGVNaXNtYXRjaDoge1xyXG4gICAgICAgIGVtYWlsOiBcIlBvciBmYXZvciwgaW5mb3JtZSB1bSBlbmRlcmXDp28gZGUgZS1tYWlsIHbDoWxpZG8uXCIsXHJcbiAgICAgICAgdXJsOiBcIlBvciBmYXZvciwgaW5mb3JtZSB1bWEgVVJMIHbDoWxpZGEuXCIsXHJcbiAgICAgIH0sXHJcbiAgICAgIHRvb1Nob3J0OiBcIlBvciBmYXZvciwgaW5mb3JtZSBwZWxvIG1lbm9zIHttaW5MZW5ndGh9IGNhcmFjdGVyZXMuXCIsXHJcbiAgICAgIHRvb0xvbmc6IFwiUG9yIGZhdm9yLCBpbmZvcm1lIG5vIG3DoXhpbW8ge21heExlbmd0aH0gY2FyYWN0ZXJlcy5cIixcclxuICAgICAgcGF0dGVybk1pc21hdGNoOiBcIlBvciBmYXZvciwgcHJlZW5jaGEgZXN0ZSBjYW1wbyBjb3JyZXRhbWVudGUuXCIsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgI19zaG93SW5wdXRFcnJvcihpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG5cclxuICAgIGlucHV0RWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3ZhbGlkYXRpb25Db25maWcuaW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX3ZhbGlkYXRpb25Db25maWcuZXJyb3JDbGFzcyk7XHJcblxyXG4gICAgY29uc3QgZXJyb3JUeXBlID0gaW5wdXRFbGVtZW50LnZhbGlkYXRpb25NZXNzYWdlO1xyXG4gICAgY29uc3QgcHRCckVycm9yTWVzc2FnZSA9XHJcbiAgICAgIHRoaXMuX1BUX0JSX0VSUk9SX01FU1NBR0VTW2Vycm9yVHlwZV0gfHwgZXJyb3JNZXNzYWdlO1xyXG5cclxuICAgIGVycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IHB0QnJFcnJvck1lc3NhZ2U7XHJcbiAgfVxyXG5cclxuICAjX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihcclxuICAgICAgYC4ke2lucHV0RWxlbWVudC5pZH0tZXJyb3JgXHJcbiAgICApO1xyXG4gICAgZXJyb3JFbGVtZW50ICYmXHJcbiAgICAgIChpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmlucHV0RXJyb3JDbGFzcyksXHJcbiAgICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX3ZhbGlkYXRpb25Db25maWcuZXJyb3JDbGFzcyksXHJcbiAgICAgIChlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSBcIlwiKSk7XHJcbiAgfVxyXG5cclxuICAjX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpIHtcclxuICAgICFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWRcclxuICAgICAgPyB0aGlzLiNfc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpXHJcbiAgICAgIDogdGhpcy4jX2hpZGVJbnB1dEVycm9yKGlucHV0RWxlbWVudCk7XHJcbiAgfVxyXG5cclxuICAjX2hhc0ludmFsaWRJbnB1dChpbnB1dExpc3QpIHtcclxuICAgIHJldHVybiBpbnB1dExpc3Quc29tZSgoaW5wdXRFbGVtZW50KSA9PiAhaW5wdXRFbGVtZW50LnZhbGlkaXR5LnZhbGlkKTtcclxuICB9XHJcblxyXG4gICNfdG9nZ2xlQnV0dG9uU3RhdGUoaW5wdXRMaXN0LCBidXR0b25FbGVtZW50KSB7XHJcbiAgICB0aGlzLiNfaGFzSW52YWxpZElucHV0KGlucHV0TGlzdClcclxuICAgICAgPyBidXR0b25FbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5fdmFsaWRhdGlvbkNvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzKVxyXG4gICAgICA6IGJ1dHRvbkVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcclxuICAgICAgICAgIHRoaXMuX3ZhbGlkYXRpb25Db25maWcuaW5hY3RpdmVCdXR0b25DbGFzc1xyXG4gICAgICAgICk7XHJcbiAgfVxyXG5cclxuICAjX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgY29uc3QgaW5wdXRMaXN0ID0gQXJyYXkuZnJvbShcclxuICAgICAgdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl92YWxpZGF0aW9uQ29uZmlnLmlucHV0U2VsZWN0b3IpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICB0aGlzLl92YWxpZGF0aW9uQ29uZmlnLnN1Ym1pdEJ1dHRvblNlbGVjdG9yXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuI190b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQpO1xyXG5cclxuICAgIGlucHV0TGlzdC5mb3JFYWNoKChpbnB1dEVsZW1lbnQpID0+IHtcclxuICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy4jX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgIHRoaXMuI190b2dnbGVCdXR0b25TdGF0ZShpbnB1dExpc3QsIGJ1dHRvbkVsZW1lbnQpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZW5hYmxlVmFsaWRhdGlvbigpIHtcclxuICAgIGNvbnN0IGlucHV0TGlzdCA9IEFycmF5LmZyb20oXHJcbiAgICAgIHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCIucG9wdXBfX2lucHV0XCIpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnN0IGJ1dHRvbkVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19idXR0b25cIik7XHJcblxyXG4gICAgdGhpcy5fZm9ybUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy4jX3RvZ2dsZUJ1dHRvblN0YXRlKGlucHV0TGlzdCwgYnV0dG9uRWxlbWVudCk7XHJcblxyXG4gICAgaW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICB0aGlzLiNfc2V0RXZlbnRMaXN0ZW5lcnMoaW5wdXRFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgUG9wdXAgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9wdXAuanNcIjtcclxuaW1wb3J0IEJhc2VGb3JtVmFsaWRhdG9yIGZyb20gXCIuL0Zvcm1WYWxpZGF0b3IuanNcIjtcclxuaW1wb3J0IHtcclxuICBhZGRFdnRCdXR0b25zRm9yRnVuY3Rpb25zLFxyXG4gIGFkZEV2ZW50VG9ET00sXHJcbiAgZ2V0VmFsaWRhdGlvbixcclxufSBmcm9tIFwiLi4vdXRpbHMvaGVscGVycy5qc1wiO1xyXG5pbXBvcnQge1xyXG4gIHBvcHVwUHJvZmlsZUZvcm0sXHJcbiAgbmFtZU91dHB1dFByb2ZpbGUsXHJcbiAgam9iT3V0cHV0UHJvZmlsZSxcclxuICBhZGROZXdQcm9maWxlLFxyXG59IGZyb20gXCIuLi91dGlscy9jb25zdGFudHMuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHsgbmFtZVNlbGVjdG9yLCBqb2JTZWxlY3RvciB9KSB7XHJcbiAgICBzdXBlcihcIi5wb3B1cFwiKTtcclxuICAgIHRoaXMuX25hbWUgPSBuYW1lU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9qb2IgPSBqb2JTZWxlY3RvcjtcclxuICAgIHRoaXMuX29wZW4gPSB0aGlzLm9wZW4oKTtcclxuICAgIHRoaXMuX2Nsb3NlID0gdGhpcy5jbG9zZSgpO1xyXG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMgPSB0aGlzLnNldEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgY29uc3QgdmFsaWRhdGlvbkNvbmZpZyA9IGdldFZhbGlkYXRpb24oXHJcbiAgICAgIHBvcHVwUHJvZmlsZUZvcm0sXHJcbiAgICAgIFwiLnBvcHVwX19pbnB1dFwiLFxyXG4gICAgICBcIi5wb3B1cF9fYnV0dG9uXCJcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5fZm9ybVZhbGlkYXRvclVzZXJJbmZvID0gbmV3IEJhc2VGb3JtVmFsaWRhdG9yKFxyXG4gICAgICB2YWxpZGF0aW9uQ29uZmlnLFxyXG4gICAgICBwb3B1cFByb2ZpbGVGb3JtXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1WYWxpZGF0b3JVc2VySW5mby5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbiAgfVxyXG5cclxuICBfZ2V0VXNlckluZm8gPSAoZXZ0KSA9PiB7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIHRoaXMuX25hbWUucGxhY2Vob2xkZXIgPSBcIkluc2lyYSBvIE5vbWUgZG8gVXN1w6FyaW9cIjtcclxuICAgIHRoaXMuX2pvYi5wbGFjZWhvbGRlciA9IFwiSW5zaXJhIGEgc3VhIFByb2Zpc3PDo29cIjtcclxuICAgIHRoaXMuX29wZW4oKTtcclxuICAgIHBvcHVwUHJvZmlsZUZvcm0ucmVzZXQoKTtcclxuICAgIHRoaXMuX2Zvcm1WYWxpZGF0b3JVc2VySW5mby5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbiAgfTtcclxuXHJcbiAgX3NldFVzZXJJbmZvID0gKGV2dCkgPT4ge1xyXG4gICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBjb25zdCB7IHZhbHVlOiBuYW1lSW5wdXQgfSA9IHRoaXMuX25hbWU7XHJcbiAgICBjb25zdCB7IHZhbHVlOiBqb2JJbnB1dCB9ID0gdGhpcy5fam9iO1xyXG4gICAgaWYgKG5hbWVJbnB1dCAmJiBqb2JJbnB1dCkge1xyXG4gICAgICBhZGROZXdQcm9maWxlKG5hbWVJbnB1dCwgam9iSW5wdXQpO1xyXG4gICAgICB0aGlzLl9jbG9zZSgpO1xyXG4gICAgICBuYW1lT3V0cHV0UHJvZmlsZS50ZXh0Q29udGVudCA9IG5hbWVJbnB1dDtcclxuICAgICAgam9iT3V0cHV0UHJvZmlsZS50ZXh0Q29udGVudCA9IGpvYklucHV0O1xyXG4gICAgICBwb3B1cFByb2ZpbGVGb3JtLnJlc2V0KCk7XHJcbiAgICAgIHRoaXMuX2Zvcm1WYWxpZGF0b3JVc2VySW5mby5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgX2dldEJ1dHRvbnNGb3JGdW5jdGlvbnNVc2VySW5mbyA9ICgpID0+ICh7XHJcbiAgICBcImJ1dHRvbi1lZGl0XCI6IHRoaXMuX2dldFVzZXJJbmZvLFxyXG4gICAgcG9wdXBfX2J1dHRvbjogdGhpcy5fc2V0VXNlckluZm8sXHJcbiAgfSk7XHJcblxyXG4gIF9oYW5kbGVCdXR0b25zRm9yRnVuY3Rpb25zVXNlckluZm8gPSAoZXZ0KSA9PlxyXG4gICAgYWRkRXZ0QnV0dG9uc0ZvckZ1bmN0aW9ucyh0aGlzLl9nZXRCdXR0b25zRm9yRnVuY3Rpb25zVXNlckluZm8oKSwgZXZ0KTtcclxuXHJcbiAgc2V0RXZlbnRMaXN0ZW5lcnNVc2VySW5mb1RvRE9NID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fb3BlbigpO1xyXG4gICAgdGhpcy5fY2xvc2UoKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzO1xyXG4gICAgYWRkRXZlbnRUb0RPTShcImNsaWNrXCIsIHRoaXMuX2hhbmRsZUJ1dHRvbnNGb3JGdW5jdGlvbnNVc2VySW5mbywgZG9jdW1lbnQpO1xyXG4gIH07XHJcbn1cclxuIiwiaW1wb3J0IFBvcHVwIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwLmpzXCI7XHJcbmltcG9ydCBCYXNlRm9ybVZhbGlkYXRvciBmcm9tIFwiLi9Gb3JtVmFsaWRhdG9yLmpzXCI7XHJcbmltcG9ydCB7XHJcbiAgYWRkRXZ0QnV0dG9uc0ZvckZ1bmN0aW9ucyxcclxuICBhZGRFdmVudFRvRE9NLFxyXG4gIGdldFZhbGlkYXRpb24sXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2hlbHBlcnMuanNcIjtcclxuaW1wb3J0IHtcclxuICBhZGROZXdDYXJkLFxyXG4gIGFkZE5ld0NhcmRUb0RPTSxcclxuICBwb3B1cENhcmRBZGRGb3JtLFxyXG4gIHBsYWNlSW5wdXRDYXJkQWRkLFxyXG4gIGltZ0xpbmtJbnB1dENhcmRBZGQsXHJcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoRm9ybSBleHRlbmRzIFBvcHVwIHtcclxuICBjb25zdHJ1Y3Rvcih7IG5hbWVTZWxlY3RvciwgbGlua1NlbGVjdG9yIH0pIHtcclxuICAgIHN1cGVyKFwiLnBvcHVwX2NhcmQtYWRkXCIpO1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWVTZWxlY3RvcjtcclxuICAgIHRoaXMuX2xpbmsgPSBsaW5rU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9vcGVuID0gdGhpcy5vcGVuKCk7XHJcbiAgICB0aGlzLl9jbG9zZSA9IHRoaXMuY2xvc2UoKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzID0gdGhpcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuICAgIGNvbnN0IHZhbGlkYXRpb25Db25maWcgPSBnZXRWYWxpZGF0aW9uKFxyXG4gICAgICBwb3B1cENhcmRBZGRGb3JtLFxyXG4gICAgICBcIi5wb3B1cF9faW5wdXRcIixcclxuICAgICAgXCIucG9wdXBfX2J1dHRvblwiXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1WYWxpZGF0b3JQb3B1cFdpdGhGb3JtID0gbmV3IEJhc2VGb3JtVmFsaWRhdG9yKFxyXG4gICAgICB2YWxpZGF0aW9uQ29uZmlnLFxyXG4gICAgICBwb3B1cENhcmRBZGRGb3JtXHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1WYWxpZGF0b3JQb3B1cFdpdGhGb3JtLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuICB9XHJcblxyXG4gIF9nZXRJbnB1dFZhbHVlcyA9IChldnQpID0+IHtcclxuICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgcGxhY2VJbnB1dENhcmRBZGQucGxhY2Vob2xkZXIgPSBcIkluc2lyYSBvIE5vbWUgZG8gTG9jYWxcIjtcclxuICAgIGltZ0xpbmtJbnB1dENhcmRBZGQucGxhY2Vob2xkZXIgPSBcIkluc2lyYSBvIFVSTCBkYSBJbWFnZW1cIjtcclxuICAgIHRoaXMuX29wZW4oKTtcclxuICAgIHBvcHVwQ2FyZEFkZEZvcm0ucmVzZXQoKTtcclxuICAgIHRoaXMuX2Zvcm1WYWxpZGF0b3JQb3B1cFdpdGhGb3JtLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuICB9O1xyXG5cclxuICBfc2V0SW5wdXRWYWx1ZXMgPSAoZXZ0KSA9PiB7XHJcbiAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IHsgdmFsdWU6IG5hbWUgfSA9IHBsYWNlSW5wdXRDYXJkQWRkO1xyXG4gICAgY29uc3QgeyB2YWx1ZTogbGluayB9ID0gaW1nTGlua0lucHV0Q2FyZEFkZDtcclxuICAgIGlmIChuYW1lICYmIGxpbmspIHtcclxuICAgICAgYWRkTmV3Q2FyZChuYW1lLCBsaW5rKTtcclxuICAgICAgYWRkTmV3Q2FyZFRvRE9NKCk7XHJcbiAgICAgIHRoaXMuX2Nsb3NlKCk7XHJcbiAgICAgIHBvcHVwQ2FyZEFkZEZvcm0ucmVzZXQoKTtcclxuICAgICAgdGhpcy5fZm9ybVZhbGlkYXRvclBvcHVwV2l0aEZvcm0uZW5hYmxlVmFsaWRhdGlvbigpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIF9nZXRCdXR0b25zRm9yRnVuY3Rpb25zUG9wdXBXaXRoRm9ybSA9ICgpID0+ICh7XHJcbiAgICBcImJ1dHRvbi1hZGRcIjogdGhpcy5fZ2V0SW5wdXRWYWx1ZXMsXHJcbiAgICBcInBvcHVwX19idXR0b25fY2FyZC1hZGRcIjogdGhpcy5fc2V0SW5wdXRWYWx1ZXMsXHJcbiAgfSk7XHJcblxyXG4gIF9oYW5kbGVCdXR0b25zRm9yRnVuY3Rpb25zUG9wdXBXaXRoRm9ybSA9IChldnQpID0+XHJcbiAgICBhZGRFdnRCdXR0b25zRm9yRnVuY3Rpb25zKHRoaXMuX2dldEJ1dHRvbnNGb3JGdW5jdGlvbnNQb3B1cFdpdGhGb3JtKCksIGV2dCk7XHJcblxyXG4gIHNldEV2ZW50TGlzdGVuZXJzUG9wdXBXaXRoRm9ybVRvRE9NID0gKCkgPT4ge1xyXG4gICAgdGhpcy5fb3BlbigpO1xyXG4gICAgdGhpcy5fY2xvc2UoKTtcclxuICAgIHRoaXMuX3NldEV2ZW50TGlzdGVuZXJzO1xyXG4gICAgYWRkRXZlbnRUb0RPTShcclxuICAgICAgXCJjbGlja1wiLFxyXG4gICAgICB0aGlzLl9oYW5kbGVCdXR0b25zRm9yRnVuY3Rpb25zUG9wdXBXaXRoRm9ybSxcclxuICAgICAgZG9jdW1lbnRcclxuICAgICk7XHJcbiAgfTtcclxufVxyXG4iLCJpbXBvcnQgeyBnZXRFbGVtZW50IH0gZnJvbSBcIi4uL3V0aWxzL2hlbHBlcnMuanNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lclNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLl9pdGVtcyA9IGl0ZW1zO1xyXG4gICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcclxuICAgIHRoaXMuX2NvbnRhaW5lciA9IGdldEVsZW1lbnQoY29udGFpbmVyU2VsZWN0b3IpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVySXRlbXMoKSB7XHJcbiAgICB0aGlzLl9pdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lci5wcmVwZW5kKGVsZW1lbnQpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgXCIuL3N0eWxlcy9pbmRleC5jc3NcIjtcclxuaW1wb3J0IHtcclxuICBuYW1lSW5wdXRQcm9maWxlLFxyXG4gIGpvYklucHV0UHJvZmlsZSxcclxuICBwbGFjZUlucHV0Q2FyZEFkZCxcclxuICBpbWdMaW5rSW5wdXRDYXJkQWRkLFxyXG4gIGFsbENhcmRzLFxyXG59IGZyb20gXCIuL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xyXG5pbXBvcnQgeyBDYXJkLCBhZGRFdmVudHNDYXJkc1RvRE9NIH0gZnJvbSBcIi4vY29tcG9uZW50cy9DYXJkLmpzXCI7XHJcbmltcG9ydCBVc2VySW5mbyBmcm9tIFwiLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qc1wiO1xyXG5pbXBvcnQgUG9wdXBXaXRoSW1hZ2UgZnJvbSBcIi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xyXG5pbXBvcnQgU2VjdGlvbiBmcm9tIFwiLi9jb21wb25lbnRzL1NlY3Rpb24uanNcIjtcclxuXHJcbmNvbnN0IHVzZXJJbmZvID0gbmV3IFVzZXJJbmZvKHtcclxuICBuYW1lU2VsZWN0b3I6IG5hbWVJbnB1dFByb2ZpbGUsXHJcbiAgam9iU2VsZWN0b3I6IGpvYklucHV0UHJvZmlsZSxcclxufSk7XHJcblxyXG5jb25zdCBwb3B1V2l0aEZvcm0gPSBuZXcgUG9wdXBXaXRoRm9ybSh7XHJcbiAgbmFtZVNlbGVjdG9yOiBwbGFjZUlucHV0Q2FyZEFkZCxcclxuICBqb2JTZWxlY3RvcjogaW1nTGlua0lucHV0Q2FyZEFkZCxcclxufSk7XHJcblxyXG5jb25zdCBwb3B1cFdpdGhJbWFnZSA9IG5ldyBQb3B1cFdpdGhJbWFnZSgpO1xyXG5cclxuY29uc3QgcmV2ZXJzZWRDYXJkcyA9IGFsbENhcmRzLnNsaWNlKCkucmV2ZXJzZSgpO1xyXG5cclxuY29uc3QgY2FyZHNTZWN0aW9uID0gbmV3IFNlY3Rpb24oXHJcbiAge1xyXG4gICAgaXRlbXM6IHJldmVyc2VkQ2FyZHMsXHJcbiAgICByZW5kZXJlcjogKGNhcmQpID0+IHtcclxuICAgICAgY29uc3QgbmV3Q2FyZEluc3RhbmNlID0gbmV3IENhcmQoY2FyZCwgXCIjY2FyZHMtdGVtcGxhdGVcIik7XHJcbiAgICAgIGNvbnN0IGNhcmRFbGVtZW50ID0gbmV3Q2FyZEluc3RhbmNlLmdlbmVyYXRlSW5zdGFuY2VDYXJkKCk7XHJcbiAgICAgIGNhcmRzU2VjdGlvbi5hZGRJdGVtKGNhcmRFbGVtZW50KTtcclxuICAgIH0sXHJcbiAgfSxcclxuICBcIi5jYXJkc1wiXHJcbik7XHJcblxyXG5jb25zdCBhZGRDYXJkc1RvRE9NID0gKCkgPT4ge1xyXG4gIGNhcmRzU2VjdGlvbi5yZW5kZXJJdGVtcygpO1xyXG59O1xyXG5cclxuY29uc3QgYWRkQ29udGVudFRvRE9NID0gKCkgPT4ge1xyXG4gIHVzZXJJbmZvLnNldEV2ZW50TGlzdGVuZXJzVXNlckluZm9Ub0RPTSgpO1xyXG4gIHBvcHVXaXRoRm9ybS5zZXRFdmVudExpc3RlbmVyc1BvcHVwV2l0aEZvcm1Ub0RPTSgpO1xyXG4gIHBvcHVwV2l0aEltYWdlLnNldEV2ZW50TGlzdGVuZXJzcG9wdXBXaXRoSW1hZ2VUb0RPTSgpO1xyXG4gIGFkZENhcmRzVG9ET00oKTtcclxuICBhZGRFdmVudHNDYXJkc1RvRE9NKCk7XHJcbn07XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBhZGRDb250ZW50VG9ET00pO1xyXG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJwIiwiZ2V0QWxsQXJycyIsIm5ld0FyciIsImluaXRpYWxBcnIiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJtYXAiLCJpdGVtIiwiX29iamVjdFNwcmVhZCIsImdldEVsZW1lbnQiLCJzZWxlY3RvciIsImRvY3VtZW50IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY2FsbElmRnVuY3Rpb24iLCJjYWxsYmFjayIsInN0eWxlRGlzcGxheVZhbHVlIiwiZGlzcGxheVZhbHVlIiwidGFyZ2V0RWxlbWVudCIsInN0eWxlIiwiZGlzcGxheSIsImNvbnRhaW5zIiwidGFyZ2V0Q2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYW5pbWF0ZU9wYWNpdHkiLCJzdGFydE9wYWNpdHkiLCJlbmRPcGFjaXR5IiwiZHVyYXRpb24iLCJyZW1vdmVPbkZpbmlzaCIsImFuaW1hdGUiLCJvcGFjaXR5IiwiZWFzaW5nIiwib25maW5pc2giLCJyZW1vdmUiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsImF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsImdldFN0YXJ0c1dpdGhEb3QiLCJzdHJpbmciLCJzdGFydHNXaXRoIiwicmVtb3ZlU3RhcnRpbmdEb3QiLCJzbGljZSIsImV2dFRhcmdldENsb3Nlc3RFbGVtZW50IiwiY2xvc2VzdCIsImlzVGFyZ2V0RWxlbWVudENsaWNrZWQiLCJhZGRFdmVudFRvRE9NIiwiZXZ0IiwiaGFuZGxlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGRFdnRCdXR0b25zRm9yRnVuY3Rpb25zIiwiYnV0dG9uRnVuY3Rpb25zIiwiYnV0dG9uRnVuY3Rpb25JZCIsInRhcmdldCIsImlkIiwiZ2V0VmFsaWRhdGlvbiIsImZvcm1TZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsImluYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJlcnJvckNsYXNzIiwiUG9wdXAiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIl9kZWZpbmVQcm9wZXJ0eSIsImFkZCIsIl9vcGVuZWRDbGFzc05hbWUiLCJfcG9wdXBFbGVtZW50IiwicmVtb3ZlUG9wdXBGdW5jIiwiX2NyZWF0ZUNhbGxiYWNrUmVtb3ZlRGlzcGxheSIsImtleSIsIl9wb3B1cEVsZW1lbnRXaXRob3V0RG90IiwiaXNPcGVuIiwiYWRkUG9wdXBEaXNwbGF5IiwiX2NyZWF0ZUNhbGxiYWNrQWRkRGlzcGxheSIsInJlbW92ZVBvcHVwRGlzcGxheSIsIl9oYW5kbGVFc2NDbG9zZSIsIl9oYW5kbGVPdXRzaWRlQ2xpY2tDbG9zZSIsIl9nZXRDbG9zZUJ1dHRvbnNBbmRBZGRFdmVudExpc3RlbmVyIiwidGhpcyIsIl9jbG9zZUJ1dHRvbnMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZSIsIl90aGlzMiIsImZvckVhY2giLCJidXR0b24iLCJjbG9zZSIsIlBvcHVwV2l0aEltYWdlIiwiX1BvcHVwIiwiX2luaGVyaXRzIiwiX3N1cGVyIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsImNhbGwiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJzZXRFdmVudExpc3RlbmVycyIsIl9zZXRFdmVudExpc3RlbmVyQ2FyZCIsIkNhcmQiLCJwcm90b3R5cGUiLCJzZXRFdmVudExpc3RlbmVyRnJvbVBvcHVwV2l0aEltYWdlIiwib3BlbiIsImRhdGEiLCJ0ZW1wbGF0ZVNlbGVjdG9yIiwiX2RhdGEiLCJfdGVtcGxhdGVTZWxlY3RvciIsIl9jYXJkRWxlbWVudCIsIl9nZXRUZW1wbGF0ZSIsIl9jYXJkSW1hZ2UiLCJxdWVyeVNlbGVjdG9yIiwiX2NhcmRUaXRsZSIsImNvbnRlbnQiLCJjbG9uZU5vZGUiLCJwb3B1cENhcmRJbWciLCJzcmMiLCJsaW5rIiwicG9wdXBDYXJkTmFtZSIsInRleHRDb250ZW50IiwibmFtZSIsImFsdCIsImhhbmRsZUNhcmRMaWtlIiwiaGVhcnRJY29uIiwiaXNBY3RpdmUiLCJnZXRBdHRyaWJ1dGUiLCJoZWFydEljb25EaXNhYmxlZCIsImhlYXJ0SWNvbkVuYWJsZWQiLCJoYW5kbGVDYXJkRGVsZXRlIiwiY2FyZERlbGV0ZSIsIl9vcGVuUG9wdXBQcm9maWxlJHBvcCIsIm9wZW5Qb3B1cFByb2ZpbGUiLCJwb3B1cFByb2ZpbGUiLCJwb3B1cFByb2ZpbGVGb3JtIiwibmFtZUlucHV0UHJvZmlsZSIsImpvYklucHV0UHJvZmlsZSIsIm5hbWVPdXRwdXRQcm9maWxlIiwiam9iT3V0cHV0UHJvZmlsZSIsImJ0blN1Ym1pdFByb2ZpbGUiLCJidG5DbG9zZVByb2ZpbGUiLCJidG5FZGl0UHJvZmlsZSIsImluaXRpYWxQcm9maWxlIiwiam9iIiwibmV3UHJvZmlsZXMiLCJhbGxQcm9maWxlcyIsIl9vcGVuUG9wdXBDYXJkQWRkJHBvcCIsIm9wZW5Qb3B1cENhcmRBZGQiLCJwb3B1cENhcmRBZGQiLCJwb3B1cENhcmRBZGRGb3JtIiwicG9wdXBDYXJkQWRkQnV0dG9uU3VibWl0IiwicGxhY2VJbnB1dENhcmRBZGQiLCJpbWdMaW5rSW5wdXRDYXJkQWRkIiwiaW5pdGlhbENhcmRzIiwibmV3Q2FyZHMiLCJhbGxDYXJkcyIsInJlcXVpcmUiLCJfb3BlblBvcHVwQ2FyZEltZyRwb3AiLCJvcGVuUG9wdXBDYXJkSW1nIiwicG9wdXBDYXJkSW1nT3BlbiIsIl9zaG93SW5wdXRFcnJvciIsIldlYWtTZXQiLCJfaGlkZUlucHV0RXJyb3IiLCJfY2hlY2tJbnB1dFZhbGlkaXR5IiwiX2hhc0ludmFsaWRJbnB1dCIsIl90b2dnbGVCdXR0b25TdGF0ZSIsIkJhc2VGb3JtVmFsaWRhdG9yIiwidmFsaWRhdGlvbkNvbmZpZyIsImZvcm1FbGVtZW50IiwiX2NsYXNzUHJpdmF0ZU1ldGhvZEluaXRTcGVjIiwiX3ZhbGlkYXRpb25Db25maWciLCJfZm9ybUVsZW1lbnQiLCJfUFRfQlJfRVJST1JfTUVTU0FHRVMiLCJ2YWx1ZU1pc3NpbmciLCJ0eXBlTWlzbWF0Y2giLCJlbWFpbCIsInVybCIsInRvb1Nob3J0IiwidG9vTG9uZyIsInBhdHRlcm5NaXNtYXRjaCIsImlucHV0TGlzdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidXR0b25FbGVtZW50IiwicHJldmVudERlZmF1bHQiLCJfY2xhc3NQcml2YXRlTWV0aG9kR2V0IiwiX3RvZ2dsZUJ1dHRvblN0YXRlMiIsImlucHV0RWxlbWVudCIsIl9zZXRFdmVudExpc3RlbmVyczIiLCJfc2hvd0lucHV0RXJyb3IyIiwiZXJyb3JNZXNzYWdlIiwiZXJyb3JFbGVtZW50IiwiZXJyb3JUeXBlIiwidmFsaWRhdGlvbk1lc3NhZ2UiLCJwdEJyRXJyb3JNZXNzYWdlIiwiX2hpZGVJbnB1dEVycm9yMiIsIl9jaGVja0lucHV0VmFsaWRpdHkyIiwidmFsaWRpdHkiLCJ2YWxpZCIsIl9oYXNJbnZhbGlkSW5wdXQyIiwic29tZSIsIlVzZXJJbmZvIiwiX3JlZiIsIm5hbWVTZWxlY3RvciIsImpvYlNlbGVjdG9yIiwiX25hbWUiLCJwbGFjZWhvbGRlciIsIl9qb2IiLCJfb3BlbiIsInJlc2V0IiwiX2Zvcm1WYWxpZGF0b3JVc2VySW5mbyIsImVuYWJsZVZhbGlkYXRpb24iLCJuZXdQcm9maWxlIiwibmFtZUlucHV0Iiwiam9iSW5wdXQiLCJwcm9maWxlIiwiY3JlYXRlTmV3UHJvZmlsZSIsIl9jbG9zZSIsIl9nZXRVc2VySW5mbyIsInBvcHVwX19idXR0b24iLCJfc2V0VXNlckluZm8iLCJfZ2V0QnV0dG9uc0ZvckZ1bmN0aW9uc1VzZXJJbmZvIiwiX2hhbmRsZUJ1dHRvbnNGb3JGdW5jdGlvbnNVc2VySW5mbyIsIlBvcHVwV2l0aEZvcm0iLCJsaW5rU2VsZWN0b3IiLCJfZm9ybVZhbGlkYXRvclBvcHVwV2l0aEZvcm0iLCJuZXdDYXJkIiwiY3JlYXRlTmV3Q2FyZCIsImFkZE5ld0NhcmQiLCJjYXJkcyIsImNhcmRzU2VjdGlvbiIsIm5ld0NhcmRUb0RPTSIsImNhcmQiLCJnZW5lcmF0ZUluc3RhbmNlQ2FyZCIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJhZGROZXdDYXJkVG9ET00iLCJfZ2V0SW5wdXRWYWx1ZXMiLCJfc2V0SW5wdXRWYWx1ZXMiLCJfZ2V0QnV0dG9uc0ZvckZ1bmN0aW9uc1BvcHVwV2l0aEZvcm0iLCJfaGFuZGxlQnV0dG9uc0ZvckZ1bmN0aW9uc1BvcHVwV2l0aEZvcm0iLCJfbGluayIsIlNlY3Rpb24iLCJjb250YWluZXJTZWxlY3RvciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyIiwiZWxlbWVudCIsInByZXBlbmQiLCJ1c2VySW5mbyIsInBvcHVXaXRoRm9ybSIsInBvcHVwV2l0aEltYWdlIiwicmV2ZXJzZSIsImNhcmRFbGVtZW50IiwiYWRkSXRlbSIsInNldEV2ZW50TGlzdGVuZXJzVXNlckluZm9Ub0RPTSIsInNldEV2ZW50TGlzdGVuZXJzUG9wdXBXaXRoRm9ybVRvRE9NIiwic2V0RXZlbnRMaXN0ZW5lcnNwb3B1cFdpdGhJbWFnZVRvRE9NIiwicmVuZGVySXRlbXMiLCJhZGRFdmVudHNDYXJkc1RvRE9NIl0sInNvdXJjZVJvb3QiOiIifQ==